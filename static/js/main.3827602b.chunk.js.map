{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","questions","answers","map","v","i","className","onClick","nextQuestion","type","key","value","text","React","Component","TitlePage","state","score","titleText","counter","currentState","currentQuestion","timeLimit","correct","console","log","setState","length","clearInterval","timer","setInterval","countdown","start","possibleAnswers","question","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0hBAQMA,E,iLACM,IAAD,OACL,OAAO,oCACP,4BAAKC,KAAKC,MAAMC,WACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OACxB,2BAAOC,UAAU,UAAUC,QAAS,kBAAK,EAAKP,MAAMQ,gBAAgBC,KAAO,SAASC,IAAKL,EAAGM,MAASP,EAAEQ,e,GALlFC,IAAMC,WAU3BC,E,YACJ,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,MAAO,EACPC,UAAW,uBACXC,QAAS,EACTC,aApBc,EAqBdC,gBAAiB,GAEnB,EAAKC,UAxBU,EAeE,E,0EAWNC,GACXC,QAAQC,IAAI,kBACTF,GACDxB,KAAK2B,SAAS,CAACT,MAAOlB,KAAKiB,MAAMC,MAAM,IAEtClB,KAAKiB,MAAMK,iBAAmBpB,EAAU0B,OAAS,EAClDH,QAAQC,IAAI,SAEdG,cAAc7B,KAAK8B,OACnBL,QAAQC,IAAI1B,KAAKiB,MAAMK,iBACvBtB,KAAK2B,SAAS,CACZR,UAAW,iBACXE,aApCiB,EAqCjBC,gBAAiBtB,KAAKiB,MAAMK,gBAAkB,O,kCAIrC,IAAD,OACVG,QAAQC,IAAI,qBACZD,QAAQC,IAAI1B,KAAKiB,MAAMG,SACpBpB,KAAKiB,MAAMG,QAAUpB,KAAKuB,UAC3BvB,KAAK2B,SAAS,CACZR,UAAU,oBACVC,QAASpB,KAAKiB,MAAMG,QAAU,KAGhCpB,KAAK2B,SAAS,CACZR,UAAW,kBACXE,aApDe,EAqDfD,QAAS,IAtDG,IAwDXpB,KAAKiB,MAAMI,cACZrB,KAAK8B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,KACjDH,cAAc7B,KAAK8B,QAEnB9B,KAAK2B,SAAS,CAACR,UAAW,qB,8BAIvB,IAAD,OACNM,QAAQC,IAAI,aACZ1B,KAAK2B,SAAS,CAACR,UAAW,qBAAsBC,QAAS,IACzDpB,KAAK8B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,O,+BAGzC,IAAD,OACP,OACE,oCACA,+BAAKhC,KAAKuB,UAAYvB,KAAKiB,MAAMG,SAzEnB,IA0EXpB,KAAKiB,MAAMI,aACd,oCACA,4BAAKrB,KAAKiB,MAAME,WAChB,2BAAOZ,UAAU,QAAQG,KAAK,SAASE,MAAM,QAAQJ,QAAS,kBAAI,EAAKyB,YAGvE,kBAAC,EAAD,CAAc9B,QAASD,EAAUF,KAAKiB,MAAMK,iBAAiBY,gBAAiBC,SAAWjC,EAAUF,KAAKiB,MAAMK,iBAAiBa,SAAU1B,aAAc,SAACe,GAAD,OAAa,EAAKf,aAAae,MAEtL,qCAAWxB,KAAKiB,MAAMC,OAVtB,U,GA3DkBJ,IAAMC,WAkFfqB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCnFc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.3827602b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport questions from './questions.json'\n\nconst TIME_LIMIT = 5\nconst TITLE_STATE = 0\nconst QUESTION_STATE = 1\n\nclass QuizQuestion extends React.Component {\n  render() {\n      return <>\n      <h1>{this.props.questions}</h1>\n      {this.props.answers.map((v, i) =>\n      <input className=\"answers\" onClick={()=> this.props.nextQuestion()} type = \"button\" key={i} value = {v.text} />)}\n      </>\n  }\n}\n\nclass TitlePage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      score: 0,\n      titleText: \"Welcome to our Quiz!\",\n      counter: 0,\n      currentState: TITLE_STATE,\n      currentQuestion: 0\n    }\n    this.timeLimit = TIME_LIMIT\n  }\n  nextQuestion(correct) {\n    console.log(\"BUTTON PRESSED\")\n    if(correct) {\n      this.setState({score: this.state.score+1})\n    }\n    if(this.state.currentQuestion == questions.length - 1) {\n      console.log(\"DONE\")\n    } else {\n    clearInterval(this.timer)\n    console.log(this.state.currentQuestion)\n    this.setState({\n      titleText: \"You answered x\",\n      currentState: QUESTION_STATE,\n      currentQuestion: this.state.currentQuestion + 1\n    })\n  }\n  }\n  countdown() {\n    console.log(\"Handling Interval\")\n    console.log(this.state.counter)\n    if(this.state.counter < this.timeLimit) {\n      this.setState({\n        titleText: `Starting the Quiz`,\n        counter: this.state.counter + 1\n      })\n    } else {\n      this.setState({\n        titleText: \"Beginning Quiz!\",\n        currentState: QUESTION_STATE,\n        counter: 0\n      })\n      if(this.state.currentState === TITLE_STATE) {\n        this.timer = setInterval(() => this.countdown(), 1000)\n        clearInterval(this.timer)\n      } else {\n        this.setState({titleText: \"You Answered!\"})\n      }\n    }\n  }\n  start() {\n    console.log(\"Starting!\")\n    this.setState({titleText: \"Starting the Quiz!\", counter: 0})\n    this.timer = setInterval(() => this.countdown(), 1000)\n  }\n\n  render() {\n    return (\n      <>\n      <p>${this.timeLimit - this.state.counter}</p>\n      {((this.state.currentState === TITLE_STATE) ?\n      <>\n      <h2>{this.state.titleText}</h2>\n      <input className=\"start\" type=\"button\" value=\"start\" onClick={()=>this.start()} />\n      </>\n      :\n      <QuizQuestion answers={questions[this.state.currentQuestion].possibleAnswers} question ={questions[this.state.currentQuestion].question} nextQuestion={(correct) => this.nextQuestion(correct)}>\n      </QuizQuestion>)}\n      <p>Score: {this.state.score}</p>)}\n      </>)\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitlePage></TitlePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}